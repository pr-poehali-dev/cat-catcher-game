import React, { useState, useEffect, useCallback } from 'react';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from '@/components/ui/dialog';
import { Input } from '@/components/ui/input';
import Icon from '@/components/ui/icon';

interface Cat {
  id: number;
  x: number;
  y: number;
  emoji: string;
  name: string;
  mood: 'happy' | 'sleepy' | 'playful' | 'grumpy';
  speed: number;
  direction: { x: number; y: number };
  isCaught: boolean;
}

interface CaughtCat extends Cat {
  personality: string;
  favoriteFood: string;
}

const Index = () => {
  const [cats, setCats] = useState<Cat[]>([]);
  const [caughtCats, setCaughtCats] = useState<CaughtCat[]>([]);
  const [selectedCat, setSelectedCat] = useState<CaughtCat | null>(null);
  const [chatMessage, setChatMessage] = useState('');
  const [chatHistory, setChatHistory] = useState<Array<{sender: 'user' | 'cat', message: string}>>([]);
  const [gameStarted, setGameStarted] = useState(false);

  const catEmojis = ['üê±', 'üêæ', 'üò∫', 'üò∏', 'üòª', 'üôÄ', 'üòø', 'üòæ'];
  const catNames = ['–ú—É—Ä–∫–∞', '–ë–∞—Ä—Å–∏–∫', '–ü—É—à–æ–∫', '–°–Ω–µ–∂–æ–∫', '–†—ã–∂–∏–∫', '–¢–∏–≥—Ä–∞', '–õ—É–Ω–∞', '–°–∏–º–±–∞'];
  
  const moodColors = {
    happy: 'bg-coral',
    sleepy: 'bg-pixel-blue',
    playful: 'bg-mint',
    grumpy: 'bg-pixel-dark'
  };

  const generateRandomCat = useCallback((id: number): Cat => {
    return {
      id,
      x: Math.random() * (window.innerWidth - 80),
      y: Math.random() * (window.innerHeight - 200) + 100,
      emoji: catEmojis[Math.floor(Math.random() * catEmojis.length)],
      name: catNames[Math.floor(Math.random() * catNames.length)],
      mood: ['happy', 'sleepy', 'playful', 'grumpy'][Math.floor(Math.random() * 4)] as Cat['mood'],
      speed: Math.random() * 2 + 1,
      direction: {
        x: (Math.random() - 0.5) * 2,
        y: (Math.random() - 0.5) * 2
      },
      isCaught: false
    };
  }, []);

  const startGame = () => {
    setGameStarted(true);
    const initialCats = Array.from({ length: 6 }, (_, i) => generateRandomCat(i));
    setCats(initialCats);
  };

  const catchCat = (catId: number) => {
    const cat = cats.find(c => c.id === catId);
    if (!cat) return;

    const caughtCat: CaughtCat = {
      ...cat,
      personality: ['–õ–∞—Å–∫–æ–≤—ã–π', '–ò–≥—Ä–∏–≤—ã–π', '–°–ø–æ–∫–æ–π–Ω—ã–π', '–õ—é–±–æ–ø—ã—Ç–Ω—ã–π'][Math.floor(Math.random() * 4)],
      favoriteFood: ['–†—ã–±–∫–∞', '–ú–æ–ª–æ–∫–æ', '–°–æ—Å–∏—Å–∫–∏', '–ü—Ç–∏—á–∫–∞'][Math.floor(Math.random() * 4)]
    };

    setCaughtCats(prev => [...prev, caughtCat]);
    setCats(prev => prev.filter(c => c.id !== catId));
    
    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–≥–æ –∫–æ—Ç–∞ —á–µ—Ä–µ–∑ –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è
    setTimeout(() => {
      setCats(prev => [...prev, generateRandomCat(Date.now())]);
    }, 3000);
  };

  const sendMessage = () => {
    if (!chatMessage.trim() || !selectedCat) return;

    const userMessage = { sender: 'user' as const, message: chatMessage };
    
    // –ü—Ä–æ—Å—Ç–æ–π –ò–ò –æ—Ç–≤–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è –∫–æ—Ç–∞
    const getCatResponse = (mood: string, message: string): string => {
      const responses = {
        happy: ['–ú—è—É! –Ø —Ç–∞–∫ —Ä–∞–¥ —Ç–µ–±—è –≤–∏–¥–µ—Ç—å! üò∏', '–£—Ä—Ä-–º—è—É! –î–∞–≤–∞–π –∏–≥—Ä–∞—Ç—å! üêæ', '–ú—É—Ä-–º—É—Ä! –¢—ã –ª—É—á—à–∏–π! ‚ù§Ô∏è'],
        sleepy: ['–ú—è—É... —Ö–æ—á—É —Å–ø–∞—Ç—å... üò¥', '–ú—É—Ä... –º–æ–∂–µ—Ç –ø–æ–∑–∂–µ –ø–æ–≥–æ–≤–æ—Ä–∏–º? üí§', '–ó–µ–≤–∞–µ—Ç... –º—è—É... ü•±'],
        playful: ['–ú–Ø–£-–ú–Ø–£! –ü–æ–∏–≥—Ä–∞–µ–º?! üèÉ‚Äç‚ôÇÔ∏è', '–ü—Ä—ã–≥-—Å–∫–æ–∫! –õ–æ–≤–∏—Ç—å –º–µ–Ω—è! üéØ', '–ú—è—É! –ë–µ–≥–æ–º –∑–∞ –º–Ω–æ–π! üèÉ'],
        grumpy: ['–§—ã—Ä... –Ω–µ —Ç—Ä–æ–≥–∞–π –º–µ–Ω—è... üòæ', '–ú—è—É-—Ä-—Ä... –æ—Å—Ç–∞–≤—å –≤ –ø–æ–∫–æ–µ! üò§', '–®—à—à... –Ω–µ –º–µ—à–∞–π! üôÑ']
      };
      
      const moodResponses = responses[mood as keyof typeof responses] || responses.happy;
      return moodResponses[Math.floor(Math.random() * moodResponses.length)];
    };

    const catResponse = { 
      sender: 'cat' as const, 
      message: getCatResponse(selectedCat.mood, chatMessage) 
    };

    setChatHistory(prev => [...prev, userMessage, catResponse]);
    setChatMessage('');
  };

  // –ê–Ω–∏–º–∞—Ü–∏—è –¥–≤–∏–∂–µ–Ω–∏—è –∫–æ—Ç–æ–≤
  useEffect(() => {
    if (!gameStarted) return;

    const interval = setInterval(() => {
      setCats(prevCats => 
        prevCats.map(cat => {
          let newX = cat.x + cat.direction.x * cat.speed;
          let newY = cat.y + cat.direction.y * cat.speed;
          let newDirection = { ...cat.direction };

          // –û—Ç—Å–∫–æ–∫ –æ—Ç –≥—Ä–∞–Ω–∏—Ü
          if (newX <= 0 || newX >= window.innerWidth - 80) {
            newDirection.x *= -1;
            newX = Math.max(0, Math.min(window.innerWidth - 80, newX));
          }
          if (newY <= 100 || newY >= window.innerHeight - 100) {
            newDirection.y *= -1;
            newY = Math.max(100, Math.min(window.innerHeight - 100, newY));
          }

          // –°–ª—É—á–∞–π–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
          if (Math.random() < 0.02) {
            newDirection = {
              x: (Math.random() - 0.5) * 2,
              y: (Math.random() - 0.5) * 2
            };
          }

          return {
            ...cat,
            x: newX,
            y: newY,
            direction: newDirection
          };
        })
      );
    }, 50);

    return () => clearInterval(interval);
  }, [gameStarted]);

  if (!gameStarted) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-pixel-lavender via-mint to-pixel-blue flex items-center justify-center p-4">
        <Card className="w-full max-w-md text-center border-4 border-pixel-dark bg-pixel-white">
          <CardHeader>
            <CardTitle className="text-4xl font-bold text-pixel-dark pixel-font">
              üê± PIXEL CATS üê±
            </CardTitle>
            <p className="text-lg text-gray-600 mt-4">
              –†–µ—Ç—Ä–æ-–∏–≥—Ä–∞ –ø–æ –ª–æ–≤–ª–µ –∫–æ—Ç–∏–∫–æ–≤ —Å –ò–ò-–æ–±—â–µ–Ω–∏–µ–º!
            </p>
          </CardHeader>
          <CardContent>
            <div className="space-y-4">
              <div className="text-sm text-gray-500 space-y-1">
                <div>üéØ –õ–æ–≤–∏ –∫–æ—Ç–æ–≤ –∫–ª–∏–∫–æ–º –ø–æ –Ω–∏–º</div>
                <div>üè† –°–æ–±–∏—Ä–∞–π –∏—Ö –≤ —Å–≤–æ–π –¥–æ–º–∏–∫</div>
                <div>üí¨ –û–±—â–∞–π—Å—è —Å –ø–æ–π–º–∞–Ω–Ω—ã–º–∏ –∫–æ—Ç–∞–º–∏</div>
                <div>üòä –£ –∫–∞–∂–¥–æ–≥–æ –∫–æ—Ç–∞ —Å–≤–æ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ</div>
              </div>
              <Button 
                onClick={startGame}
                className="w-full h-12 text-xl font-bold bg-coral hover:bg-coral/90 border-4 border-pixel-dark text-pixel-white"
              >
                –ü–û–ï–•–ê–õ–ò! üöÄ
              </Button>
            </div>
          </CardContent>
        </Card>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-pixel-lavender via-mint to-pixel-blue relative overflow-hidden">
      {/* –ò–≥—Ä–æ–≤–æ–µ –ø–æ–ª–µ */}
      <div className="relative w-full h-screen">
        {/* –õ–µ—Ç–∞—é—â–∏–µ –∫–æ—Ç—ã */}
        {cats.map(cat => (
          <div
            key={cat.id}
            className={`absolute cursor-pointer transition-all duration-100 hover:scale-110 ${moodColors[cat.mood]} rounded-full p-2 border-2 border-pixel-dark animate-pixel-glow`}
            style={{
              left: `${cat.x}px`,
              top: `${cat.y}px`,
              transform: `scale(${cat.mood === 'playful' ? '1.2' : '1'})`,
            }}
            onClick={() => catchCat(cat.id)}
          >
            <div className="text-3xl animate-cat-bounce">
              {cat.emoji}
            </div>
          </div>
        ))}

        {/* –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è */}
        <div className="absolute top-4 left-4 right-4 flex justify-between items-center">
          <Card className="border-2 border-pixel-dark bg-pixel-white/90">
            <CardContent className="p-3">
              <div className="flex items-center gap-2">
                <Icon name="Home" size={20} />
                <span className="font-bold">–î–æ–º–∏–∫: {caughtCats.length} –∫–æ—Ç–æ–≤</span>
              </div>
            </CardContent>
          </Card>

          <Card className="border-2 border-pixel-dark bg-pixel-white/90">
            <CardContent className="p-3">
              <div className="flex items-center gap-2">
                <Icon name="Target" size={20} />
                <span className="font-bold">–ù–∞ –ø–æ–ª–µ: {cats.length} –∫–æ—Ç–æ–≤</span>
              </div>
            </CardContent>
          </Card>
        </div>

        {/* –î–æ–º–∏–∫ —Å –∫–æ—Ç–∞–º–∏ */}
        <Card className="absolute bottom-4 left-4 w-80 max-h-96 border-4 border-pixel-dark bg-pixel-white/95">
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <Icon name="Home" size={24} />
              –ú–æ–π –¥–æ–º–∏–∫ –∫–æ—Ç–æ–≤
            </CardTitle>
          </CardHeader>
          <CardContent className="space-y-2 max-h-60 overflow-y-auto">
            {caughtCats.length === 0 ? (
              <p className="text-gray-500 text-center py-4">
                –ü–æ–∫–∞ –Ω–µ—Ç –∫–æ—Ç–∏–∫–æ–≤... –õ–æ–≤–∏ –∏—Ö! üéØ
              </p>
            ) : (
              caughtCats.map(cat => (
                <Dialog key={cat.id}>
                  <DialogTrigger asChild>
                    <Button
                      variant="outline"
                      className="w-full p-3 h-auto border-2 border-pixel-dark bg-pixel-white hover:bg-mint/50"
                      onClick={() => {
                        setSelectedCat(cat);
                        setChatHistory([]);
                      }}
                    >
                      <div className="flex items-center gap-3 w-full">
                        <span className="text-2xl">{cat.emoji}</span>
                        <div className="text-left">
                          <div className="font-bold">{cat.name}</div>
                          <div className="text-xs text-gray-500">
                            {cat.personality} ‚Ä¢ –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ: {cat.mood}
                          </div>
                        </div>
                      </div>
                    </Button>
                  </DialogTrigger>
                  <DialogContent className="border-4 border-pixel-dark bg-pixel-white">
                    <DialogHeader>
                      <DialogTitle className="flex items-center gap-2">
                        <span className="text-3xl">{cat.emoji}</span>
                        –ß–∞—Ç —Å {cat.name}
                      </DialogTitle>
                    </DialogHeader>
                    <div className="space-y-4">
                      <div className="h-64 border-2 border-gray-200 rounded p-3 overflow-y-auto bg-gray-50">
                        {chatHistory.length === 0 ? (
                          <p className="text-gray-500 text-center py-8">
                            –ù–∞—á–Ω–∏ —Ä–∞–∑–≥–æ–≤–æ—Ä —Å {cat.name}! üí¨
                          </p>
                        ) : (
                          <div className="space-y-2">
                            {chatHistory.map((msg, index) => (
                              <div
                                key={index}
                                className={`flex ${msg.sender === 'user' ? 'justify-end' : 'justify-start'}`}
                              >
                                <div
                                  className={`max-w-xs p-2 rounded-lg border-2 border-pixel-dark ${
                                    msg.sender === 'user'
                                      ? 'bg-coral text-white'
                                      : `${moodColors[cat.mood]} text-pixel-dark`
                                  }`}
                                >
                                  {msg.message}
                                </div>
                              </div>
                            ))}
                          </div>
                        )}
                      </div>
                      <div className="flex gap-2">
                        <Input
                          value={chatMessage}
                          onChange={(e) => setChatMessage(e.target.value)}
                          placeholder={`–ù–∞–ø–∏—à–∏ —á—Ç–æ-—Ç–æ ${cat.name}...`}
                          onKeyPress={(e) => e.key === 'Enter' && sendMessage()}
                          className="border-2 border-pixel-dark"
                        />
                        <Button 
                          onClick={sendMessage}
                          className="bg-coral hover:bg-coral/90 border-2 border-pixel-dark text-white"
                        >
                          <Icon name="Send" size={16} />
                        </Button>
                      </div>
                      <div className="text-xs text-gray-500 bg-gray-100 p-2 rounded border">
                        <strong>{cat.name}</strong> ‚Ä¢ {cat.personality} ‚Ä¢ –õ—é–±–∏—Ç: {cat.favoriteFood} ‚Ä¢ –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ: {cat.mood}
                      </div>
                    </div>
                  </DialogContent>
                </Dialog>
              ))
            )}
          </CardContent>
        </Card>
      </div>
    </div>
  );
};

export default Index;